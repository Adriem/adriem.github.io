@import "./_variables.scss";

// --=( RESPONSIVE )==----------------------------------------------------------

@mixin screen-between($min-width, $max-width) {
  @media screen
    and (min-width: $min-width)
    and (max-width: $max-width) { @content };
    // and (max-width: $max-width - 1) { @content };
}

@mixin screen-up-to($max-width) {
  // @media screen and (max-width: $max-width - 1) { @content };
  @media screen and (max-width: $max-width) { @content };
}

@mixin screen-at-least($min-width) {
  @media screen and (min-width: $min-width) { @content };
}

@mixin screen-xl() { @include screen-at-least($width-xl) { @content }; }
@mixin screen-lg() { @include screen-between($width-lg, $width-xl) { @content }; }
@mixin screen-md() { @include screen-between($width-md, $width-lg) { @content }; }
@mixin screen-sm() { @include screen-between($width-sm, $width-md) { @content }; }
@mixin screen-xs() { @include screen-up-to($width-sm) { @content }; }

@mixin screen-desktop() { @include screen-at-least($width-sm) { @content }; }
@mixin screen-mobile() { @include screen-up-to($width-sm) { @content }; }


@mixin clearfix() {
    &:after { content: ""; clear: both; display: block; }
}

// --=( GRID )==----------------------------------------------------------------

@mixin _grid-wrapper($max-width, $column-width, $gutter-width, $max-columns) {
  $slot-width: $column-width + $gutter-width;
  $grid-max-width: if($max-columns > 0,
                      min($max-width, $slot-width * $max-columns),
                      $max-width);
  $grid-width: floor($grid-max-width / $slot-width) * $slot-width;

  @if $max-width >= 2 * $slot-width {
    @include clearfix;
    width: $grid-width;
    margin: 0 auto;
  } @else {
    @include clearfix;
    width: 100%;
    margin: 0 auto;
  }
}

@mixin _grid-elem($max-width, $column-width, $row-height, $gutter-width, $gutter-height) {
  $slot-width: $column-width + $gutter-width;

  @if $max-width >= 2 * $slot-width {
    width: $column-width + $gutter-width;
    padding: ($gutter-height / 2) ($gutter-width / 2);
    min-height: $row-height;
    display: block;
    float: left;
    box-sizing: border-box;
  } @else {
    padding: ($gutter-height / 2) ($gutter-width / 2);
    display: block;
    float: none;
    box-sizing: border-box;
  }
}

@mixin fixed-width-grid(
  $column-width,
  $row-height,
  $gutter-width,
  $gutter-height,
  $max-columns: -1) {
    @include clearfix;

    @include screen-xs { @include _grid-wrapper($width-xs, $column-width, $gutter-width, $max-columns) }
    @include screen-sm { @include _grid-wrapper($width-sm, $column-width, $gutter-width, $max-columns) }
    @include screen-md { @include _grid-wrapper($width-md, $column-width, $gutter-width, $max-columns) }
    @include screen-lg { @include _grid-wrapper($width-lg, $column-width, $gutter-width, $max-columns) }
    @include screen-xl { @include _grid-wrapper($width-xl, $column-width, $gutter-width, $max-columns) }

    &__element {
      @include screen-xs { @include _grid-elem($width-xs, $column-width, $row-height, $gutter-width, $gutter-height) }
      @include screen-sm { @include _grid-elem($width-sm, $column-width, $row-height, $gutter-width, $gutter-height) }
      @include screen-md { @include _grid-elem($width-md, $column-width, $row-height, $gutter-width, $gutter-height) }
      @include screen-lg { @include _grid-elem($width-lg, $column-width, $row-height, $gutter-width, $gutter-height) }
      @include screen-xl { @include _grid-elem($width-xl, $column-width, $row-height, $gutter-width, $gutter-height) }
    }
}





@function calculate-grid-width($max-width, $slot-width, $max-items: -1) {
  $_max-width: if($max-items > 0,
                  min($max-width, $slot-width * $max-items),
                  $max-width);

  @return floor($_max-width / $slot-width) * $slot-width;
}

@mixin grid($element-width, $gutter-width, $max-items: -1) {
    $slot-width: $element-width + $gutter-width;

    @include clearfix;

    @include screen-xs { width: 100%; margin: 0; }
    @include screen-sm { width: calculate-grid-width($width-sm, $slot-width, $max-items); }
    @include screen-md { width: calculate-grid-width($width-md, $slot-width, $max-items); }
    @include screen-lg { width: calculate-grid-width($width-lg, $slot-width, $max-items); }
    @include screen-xl { width: calculate-grid-width($width-xl, $slot-width, $max-items); }

    margin: 0 auto;
}

@mixin grid-element($element-width, $gutter-width, $scale: 1) {
    width: $element-width * $scale + $gutter-width * ($scale - 1);
    margin-left: floor($gutter-width / 2);
    margin-right: floor($gutter-width / 2);
    display: block;
    float: left;
    box-sizing: border-box;
}


// --=( PARAGRAPH )==-----------------------------------------------------------

@mixin paragraph($width, $margin-bottom) {
    max-width: $width;
    text-align: justify;
    margin-bottom: $margin-bottom;
    margin-left: auto;
    margin-right: auto;
}


// --=( ANIMATIONS )==----------------------------------------------------------

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} { @content }
  @-moz-keyframes #{$name} { @content }
  @-o-keyframes #{$name} { @content }
  @keyframes #{$name} { @content }
}

@mixin fade-in-anim($name, $direction: 'top', $offset: 0, $from: 0%, $to: 100%) {
  @include keyframes($name) {
    0% { opacity: 0; position: relative; #{ $direction }: $offset; }
    #{$from} { opacity: 0; position: relative; #{ $direction }: $offset; }
    #{$to} { opacity: 1; position: relative; #{ $direction }: 0; }
    100% { opacity: 1; position: relative; #{ $direction }: 0; }
  }
}
